#####################
# Interfaces
#####################

interface ERC20 {
  id: ID!
  name: String!
  symbol: String!
  decimals: BigInt!
  totalSupply: BigInt!
}

interface Vault {
  id: ID!
  token: Token!
  balance: BigInt!
  pricePerFullShare: BigInt!
}

interface VaultBalance {
  id: ID!
  netDeposit: BigInt!
  netShareDeposit: BigInt!
  grossDeposit: BigInt!
  grossShareDeposit: BigInt!
  grossWithdraw: BigInt!
  grossShareWithdraw: BigInt!
}

interface Snapshot {
  id: ID!
  timestamp: Int!
}

#####################
# Entities
#####################
type Token implements ERC20 @entity {
  id: ID!
  name: String!
  symbol: String!
  decimals: BigInt!
  totalSupply: BigInt!
}

type Sett implements ERC20 & Vault & VaultBalance @entity {
  id: ID!
  name: String!
  symbol: String!
  decimals: BigInt!
  totalSupply: BigInt!
  token: Token!
  balance: BigInt!
  pricePerFullShare: BigInt!
  netDeposit: BigInt!
  netShareDeposit: BigInt!
  grossDeposit: BigInt!
  grossShareDeposit: BigInt!
  grossWithdraw: BigInt!
  grossShareWithdraw: BigInt!
}

type SettSnapshot implements ERC20 & Vault & VaultBalance & Snapshot @entity {
  id: ID!
  timestamp: Int!
  name: String!
  symbol: String!
  decimals: BigInt!
  totalSupply: BigInt!
  token: Token!
  balance: BigInt!
  pricePerFullShare: BigInt!
  netDeposit: BigInt!
  netShareDeposit: BigInt!
  grossDeposit: BigInt!
  grossShareDeposit: BigInt!
  grossWithdraw: BigInt!
  grossShareWithdraw: BigInt!
}

type UserSettBalance implements VaultBalance @entity {
  id: ID!
  user: User!
  sett: Sett!
  netDeposit: BigInt!
  netShareDeposit: BigInt!
  grossDeposit: BigInt!
  grossShareDeposit: BigInt!
  grossWithdraw: BigInt!
  grossShareWithdraw: BigInt!
}

type Transfer implements Snapshot @entity {
  id: ID!
  timestamp: Int!
  from: String!
  to: String!
  amount: BigInt!
}

type User @entity {
  id: ID!
  settBalances: [UserSettBalance!]! @derivedFrom(field: "user")
}

## NFTS -- Start
type NFTTokenBalance @entity {
  id: ID!
  token: NFTToken!
  amount: BigInt!
  owner: NFTUser
}
type NFTToken @entity {
  id: ID!
  tokenId: BigInt!
}

type NFTUser @entity {
  id: ID!
  tokens:[NFTTokenBalance!] @derivedFrom(field:"owner")
}
## NFTS -- End

## Tokens -- Start
type Token_Vault @entity {
  id: ID!
  "Amount of underlying token per 1 share"
  pricePerFullShare: BigDecimal!
  "Total shares supply"
  totalSupply: BigDecimal!
  "Full vault underlying token balance (vault + strategy)"
  vaultBalance: BigDecimal!
  "Token_Strategy underlying token balance"
  strategyBalance: BigDecimal!
  # TODO:
  "How much the vault allows to be borrowed"
  available: BigDecimal!
  "Token_Deposit token"
  underlyingToken: Token_Token!
  shareToken: Token_Token!
  currentController: Token_Controller
  currentStrategy: Token_Strategy
  "Token_Transaction metadata for the last update"
  transaction: Token_Transaction!
  # TODO:
  "balance: totalDeposited - totalWithdrawn: all deposits of underlying made by external accounts"
  netDeposits: BigDecimal!
  totalDeposited: BigDecimal!
  totalWithdrawn: BigDecimal!
  "totalActiveShares: totalSharesMinted - totalSharesBurned"
  totalActiveShares: BigDecimal!
  totalSharesMinted: BigDecimal!
  totalSharesBurned: BigDecimal!
  totalEarnings: BigDecimal!
  # raw
  pricePerFullShareRaw: BigInt!
  totalSupplyRaw: BigInt!
  # TODO:
  "Balance of the Token_Vault contract of underlying Token_Token + balance of the Token_Strategy contract of underlying Token_Token"
  vaultBalanceRaw: BigInt!
  # TODO:
  "Balance of underlying Token_Token specifically held in the strategy"
  strategyBalanceRaw: BigInt!
  # TODO:
  "How much the vault allows to be borrowed"
  availableRaw: BigInt!
  netDepositsRaw: BigInt!
  totalDepositedRaw: BigInt!
  totalWithdrawnRaw: BigInt!
  totalActiveSharesRaw: BigInt!
  totalSharesMintedRaw: BigInt!
  totalSharesBurnedRaw: BigInt!
  totalEarningsRaw: BigInt!
  totalHarvestCalls: BigInt!
  # derived fields
  transfers: [Token_Transfer!]! @derivedFrom(field: "vault")
  deposits: [Token_Deposit!]! @derivedFrom(field: "vault")
  withdrawals: [Token_Withdrawal!]! @derivedFrom(field: "vault")
  harvests: [Token_Harvest!]! @derivedFrom(field: "vault")
  balances: [Token_AccountVaultBalance!]! @derivedFrom(field: "vault")
  strategies: [Token_Strategy!] @derivedFrom(field: "vault")
  controllers: [Token_Controller!] @derivedFrom(field: "vault")
}

type Token_Account @entity {
  "User ethereum address"
  id: ID!
  vaultBalances: [Token_AccountVaultBalance!]! @derivedFrom(field: "account")
  "Token_Account deposits"
  deposits: [Token_Deposit!]! @derivedFrom(field: "account")
  "Token_Account withdrawals"
  withdrawals: [Token_Deposit!]! @derivedFrom(field: "account")
  "Incoming transfers"
  receivedTransfers: [Token_Transfer!]! @derivedFrom(field: "to")
  "Outgoing transfers"
  sentTransfers: [Token_Transfer!]! @derivedFrom(field: "from")
}

type Token_AccountVaultBalance @entity {
  id: ID!
  vault: Token_Vault!
  account: Token_Account!
  "Token_Deposit/withdrawal token"
  underlyingToken: Token_Token!
  shareToken: Token_Token!
  "Net deposits of a given Token_Account within a given Token_Vault. Transfers between accounts are taken into consideration for this metric"
  netDeposits: BigDecimal!
  "Total tokens deposited by this Token_Account in Token_Vault"
  totalDeposited: BigDecimal!
  "Total tokens withdrawn by this Token_Account in Token_Vault"
  totalWithdrawn: BigDecimal!
  "Total tokens sent to another account by this Token_Account in Token_Vault"
  totalSent: BigDecimal!
  "Total tokens received from another account by this Token_Account in Token_Vault"
  totalReceived: BigDecimal!
  "Shares are the token minted by the Token_Vault"
  shareBalance: BigDecimal!
  totalSharesMinted: BigDecimal!
  totalSharesBurned: BigDecimal!
  totalSharesSent: BigDecimal!
  totalSharesReceived: BigDecimal!
  "Net deposits of a given Token_Account within a given Token_Vault. Transfers between accounts are taken into consideration for this metric"
  netDepositsRaw: BigInt!
  "Total tokens deposited by this Token_Account in Token_Vault"
  totalDepositedRaw: BigInt!
  "Total tokens withdrawn by this Token_Account in Token_Vault"
  totalWithdrawnRaw: BigInt!
  "Total tokens sent to another account by this Token_Account in Token_Vault"
  totalSentRaw: BigInt!
  "Total tokens received from another account by this Token_Account in Token_Vault"
  totalReceivedRaw: BigInt!
  "Shares are the token minted by the Token_Vault"
  shareBalanceRaw: BigInt!
  totalSharesMintedRaw: BigInt!
  totalSharesBurnedRaw: BigInt!
  totalSharesSentRaw: BigInt!
  totalSharesReceivedRaw: BigInt!
}

type Token_Token @entity {
  id: ID!
  address: Bytes!
  decimals: Int!
  name: String!
  symbol: String!
}

type Token_Transfer @entity {
  id: ID!
  from: Token_Account!
  to: Token_Account!
  value: BigInt!
  amount: BigInt!
  vault: Token_Vault!
  pricePerFullShare: BigInt!
  vaultBalance: BigInt!
  totalSupply: BigInt!
  available: BigInt!
  transaction: Token_Transaction!
}

interface Token_Action @entity {
  id: ID!
  vault: Token_Vault!
  account: Token_Account!
  amount: BigInt!
  shares: BigInt!
  pricePerFullShare: BigInt!
  vaultBalance: BigInt!
  totalSupply: BigInt!
  available: BigInt!
  transaction: Token_Transaction!
  blockNumber: BigInt!
}

type Token_Deposit implements Token_Action @entity {
  id: ID!
  vault: Token_Vault!
  account: Token_Account!
  amount: BigInt!
  shares: BigInt!
  pricePerFullShare: BigInt!
  vaultBalance: BigInt!
  totalSupply: BigInt!
  available: BigInt!
  transaction: Token_Transaction!
  blockNumber: BigInt!
}

type Token_Withdrawal implements Token_Action @entity {
  id: ID!
  vault: Token_Vault!
  account: Token_Account!
  amount: BigInt!
  shares: BigInt!
  pricePerFullShare: BigInt!
  vaultBalance: BigInt!
  totalSupply: BigInt!
  available: BigInt!
  transaction: Token_Transaction!
  blockNumber: BigInt!
}

type Token_Harvest @entity {
  id: ID!
  vault: Token_Vault!
  strategy: Token_Strategy!
  pricePerFullShareBefore: BigDecimal!
  pricePerFullShareAfter: BigDecimal!
  vaultBalanceBefore: BigDecimal!
  vaultBalanceAfter: BigDecimal!
  strategyBalanceBefore: BigDecimal!
  strategyBalanceAfter: BigDecimal!
  earnings: BigDecimal!
  pricePerFullShareBeforeRaw: BigInt!
  pricePerFullShareAfterRaw: BigInt!
  vaultBalanceBeforeRaw: BigInt!
  vaultBalanceAfterRaw: BigInt!
  strategyBalanceBeforeRaw: BigInt!
  strategyBalanceAfterRaw: BigInt!
  earningsRaw: BigInt!
  transaction: Token_Transaction!
}

type Token_Strategy @entity {
  "Ethereum address"
  id: ID!
  vault: Token_Vault!
  totalEarnings: BigDecimal!
  totalEarningsRaw: BigInt!
  harvests: [Token_Harvest!]! @derivedFrom(field: "strategy")
  activeOnVaults: [Token_Vault!] @derivedFrom(field: "currentStrategy")
}

type Token_Controller @entity {
  "Ethereum address"
  id: ID!
  vault: Token_Vault!
  activeOnVaults: [Token_Vault!] @derivedFrom(field: "currentController")
}

type Token_Transaction @entity {
  "ID = Token_Transaction Hash"
  id: ID!
  timestamp: BigInt!
  blockNumber: BigInt!
  # duplicated field to allow for byte search with transactionHash_contains
  transactionHash: Bytes!
  deposits: [Token_Deposit!]! @derivedFrom(field: "transaction")
  withdrawals: [Token_Withdrawal!]! @derivedFrom(field: "transaction")
  transfers: [Token_Transfer!]! @derivedFrom(field: "transaction")
  harvests: [Token_Harvest!]! @derivedFrom(field: "transaction")
  # TODO: rename
  "List of Vaults that last updated on this transaction"
  vaultsUpdated: [Token_Vault!]! @derivedFrom(field: "transaction")
}

# type Token_Geyser @entity {
#   id: ID!
#   totalStaked: BigInt!
#   stakeEvents: [Token_StakedEvent!]! @derivedFrom(field: "geyser")
#   unstakeEvents: [Token_UnstakedEvent!]! @derivedFrom(field: "geyser")
# }

# # Each user has account data for one geyser
# type Token_GeyserAccountData @entity {
#   id: ID!
#   geyser: Token_Geyser!
#   stakes: [Token_GeyserStake!]! @derivedFrom(field: "account")
#   lastUpdate: BigInt!
#   cumulativeShareSeconds: BigInt!
# }

# type Token_GeyserStake @entity {
#   id: ID!
#   geyser: Token_Geyser!
#   account: Token_Account!
#   amount: BigInt!
#   stakedAt: BigInt!
# }

type Token_StakedEvent @entity {
  id: ID!
#  geyser: Token_Geyser!
  user: Bytes!
  amount: BigInt!
  total: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  data: Bytes!
}

type Token_UnstakedEvent @entity {
  id: ID!
#  geyser: Token_Geyser!
  user: Bytes!
  amount: BigInt!
  total: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
  data: Bytes!
}

type Token_HarvestEvent @entity {
  id: ID!
  sourceAddress: String!
  sourceId: String!
}

type Token_FarmHarvestEvent @entity {
  id: ID!
  totalFarmHarvested: BigInt!
  farmToRewards: BigInt!
  governancePerformanceFee: BigInt!
  strategistPerformanceFee: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
}

type Token_SushiHarvestEvent @entity {
  id: ID!
  xSushiHarvested: BigInt!
  totalxSushi: BigInt!
  toStrategist: BigInt!
  toGovernance: BigInt!
  toBadgerTree: BigInt!
  timestamp: BigInt!
  blockNumber: BigInt!
}

type Token_TokenBalance @entity {
  id: ID!
  balance: BigInt!
  token: Token_Token!
}

## Tokens -- End


## Harvests -- Start
type TreeDistribution @entity {
  id: ID!
  token: Token!
  amount: BigInt!
  blockNumber: BigInt!
  timestamp: BigInt!
}
## Harvests -- End